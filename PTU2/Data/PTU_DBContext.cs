// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using The_Prodigal_Son.Models;
using static The_Prodigal_Son.Utilities.DotEnv;

namespace The_Prodigal_Son.Data
{
    public partial class PTU_DBContext : DbContext
    {
        public PTU_DBContext()
        {
        }

        public PTU_DBContext(DbContextOptions<PTU_DBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Character> Characters { get; set; }
        public virtual DbSet<Move> Moves { get; set; }
        public virtual DbSet<Player> Players { get; set; }
        public virtual DbSet<Pokedex> Pokedex { get; set; }
        public virtual DbSet<PokemonOwned> PokemonOwneds { get; set; }
        public virtual DbSet<PokemonStat> PokemonStats { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<TypeEffect> TypeEffects { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var ConnectionString = Fetch("ConnectionString");
                optionsBuilder.UseSqlServer(ConnectionString);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Character>(entity =>
            {
                entity.ToTable("characters");

                entity.Property(e => e.CharacterId).HasColumnName("characterID");

                entity.Property(e => e.CharacterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("characterName");

                entity.Property(e => e.GameMode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gameMode");

                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("link");

                entity.Property(e => e.PlayerId).HasColumnName("playerID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Characters)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__character__playe__18EBB532");
            });

            modelBuilder.Entity<Move>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("moves");

                entity.Property(e => e.Ac).HasColumnName("ac");

                entity.Property(e => e.DamageRoll)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("damageRoll");

                entity.Property(e => e.IsSpecial).HasColumnName("isSpecial");

                entity.Property(e => e.MoveCategory)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("moveCategory");

                entity.Property(e => e.MoveName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("moveName");

                entity.Property(e => e.MoveType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("moveType");

                entity.Property(e => e.PokemonId).HasColumnName("pokemonID");

                entity.Property(e => e.SpecialCondition)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("specialCondition");

                entity.Property(e => e.SpecialEffect)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("specialEffect");

                entity.HasOne(d => d.MoveTypeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.MoveType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__moves__moveType__25518C17");

                entity.HasOne(d => d.Pokemon)
                    .WithMany()
                    .HasForeignKey(d => d.PokemonId)
                    .HasConstraintName("FK__moves__pokemonID__245D67DE");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.ToTable("players");

                entity.Property(e => e.PlayerId).HasColumnName("playerID");

                entity.Property(e => e.DiscordId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("discordID");

                entity.Property(e => e.PlayerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("playerName");
            });

            modelBuilder.Entity<Pokedex>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pokedex");

                entity.Property(e => e.DualType).HasColumnName("dualType");

                entity.Property(e => e.PokemonName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("pokemonName");

                entity.Property(e => e.TypeOne)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeOne");

                entity.Property(e => e.TypeTwo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeTwo");
            });

            modelBuilder.Entity<PokemonOwned>(entity =>
            {
                entity.HasKey(e => e.PokemonId)
                    .HasName("PK__pokemonO__A94454975CE9BDC9");

                entity.ToTable("pokemonOwned");

                entity.Property(e => e.PokemonId).HasColumnName("pokemonID");

                entity.Property(e => e.CharacterId).HasColumnName("characterID");

                entity.Property(e => e.PokemonName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("pokemonName");

                entity.HasOne(d => d.Character)
                    .WithMany(p => p.PokemonOwneds)
                    .HasForeignKey(d => d.CharacterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__pokemonOw__chara__1DB06A4F");
            });

            modelBuilder.Entity<PokemonStat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pokemonStats");

                entity.Property(e => e.Attack).HasColumnName("attack");

                entity.Property(e => e.Defense).HasColumnName("defense");

                entity.Property(e => e.DualType).HasColumnName("dualType");

                entity.Property(e => e.EvAny).HasColumnName("evAny");

                entity.Property(e => e.EvAtk).HasColumnName("evAtk");

                entity.Property(e => e.EvSatk).HasColumnName("evSatk");

                entity.Property(e => e.HitPoints).HasColumnName("hitPoints");

                entity.Property(e => e.PokemonId).HasColumnName("pokemonID");

                entity.Property(e => e.SpecialAttack).HasColumnName("specialAttack");

                entity.Property(e => e.SpecialDefense).HasColumnName("specialDefense");

                entity.Property(e => e.Speed).HasColumnName("speed");

                entity.Property(e => e.TypeOne)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeOne");

                entity.Property(e => e.TypeTwo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeTwo");

                entity.HasOne(d => d.Pokemon)
                    .WithMany()
                    .HasForeignKey(d => d.PokemonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__pokemonSt__pokem__1F98B2C1");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("skills");

                entity.Property(e => e.Acrobatics).HasColumnName("acrobatics");

                entity.Property(e => e.Athletics).HasColumnName("athletics");

                entity.Property(e => e.CharacterId).HasColumnName("characterID");

                entity.Property(e => e.Charm).HasColumnName("charm");

                entity.Property(e => e.Combat).HasColumnName("combat");

                entity.Property(e => e.Command).HasColumnName("command");

                entity.Property(e => e.Focus).HasColumnName("focus");

                entity.Property(e => e.GeneralEd).HasColumnName("generalEd");

                entity.Property(e => e.Guile).HasColumnName("guile");

                entity.Property(e => e.Intimidate).HasColumnName("intimidate");

                entity.Property(e => e.Intuition).HasColumnName("intuition");

                entity.Property(e => e.MedicineEd).HasColumnName("medicineEd");

                entity.Property(e => e.OccultEd).HasColumnName("occultEd");

                entity.Property(e => e.Perception).HasColumnName("perception");

                entity.Property(e => e.PokemonEd).HasColumnName("pokemonEd");

                entity.Property(e => e.Stealth).HasColumnName("stealth");

                entity.Property(e => e.Survival).HasColumnName("survival");

                entity.Property(e => e.TechnologyEd).HasColumnName("technologyEd");

                entity.HasOne(d => d.Character)
                    .WithMany()
                    .HasForeignKey(d => d.CharacterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__skills__characte__1AD3FDA4");
            });

            modelBuilder.Entity<TypeEffect>(entity =>
            {
                entity.HasKey(e => e.TypeName)
                    .HasName("PK__typeEffe__A20CDB59015E35CA");

                entity.ToTable("typeEffect");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.VsBug).HasColumnName("vsBug");

                entity.Property(e => e.VsDark).HasColumnName("vsDark");

                entity.Property(e => e.VsDragon).HasColumnName("vsDragon");

                entity.Property(e => e.VsElectric).HasColumnName("vsElectric");

                entity.Property(e => e.VsFairy).HasColumnName("vsFairy");

                entity.Property(e => e.VsFighting).HasColumnName("vsFighting");

                entity.Property(e => e.VsFire).HasColumnName("vsFire");

                entity.Property(e => e.VsFlying).HasColumnName("vsFlying");

                entity.Property(e => e.VsGhost).HasColumnName("vsGhost");

                entity.Property(e => e.VsGrass).HasColumnName("vsGrass");

                entity.Property(e => e.VsGround).HasColumnName("vsGround");

                entity.Property(e => e.VsIce).HasColumnName("vsIce");

                entity.Property(e => e.VsNormal).HasColumnName("vsNormal");

                entity.Property(e => e.VsPoison).HasColumnName("vsPoison");

                entity.Property(e => e.VsPsychic).HasColumnName("vsPsychic");

                entity.Property(e => e.VsRock).HasColumnName("vsRock");

                entity.Property(e => e.VsSteel).HasColumnName("vsSteel");

                entity.Property(e => e.VsWater).HasColumnName("vsWater");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}